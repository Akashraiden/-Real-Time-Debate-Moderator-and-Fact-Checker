name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: debate
          IMAGE_TAG: latest
        run: |
          echo "üõ†Ô∏è Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "üì§ Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest image
        run: |
          echo "üì• Pulling image from ECR..."
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/debate:latest || {
            echo "‚ùå Failed to pull image. Check AWS_ECR_LOGIN_URI and repository name."; exit 1;
          }

      - name: Stop and remove existing container if running
        run: |
          echo "üîç Checking for existing container..."
          if docker ps -q --filter "name=streamlit-app" | grep -q .; then
            echo "üõë Stopping existing container..."
            docker stop streamlit-app
            echo "üóëÔ∏è Removing existing container..."
            docker rm -fv streamlit-app
          else
            echo "‚úÖ No existing container found."
          fi

      - name: Run Docker Image to serve users
        run: |
          echo "üöÄ Starting new container from image..."
          docker run -d -p 8501:8501 \
            --ipc="host" \
            --name=streamlit-app \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/debate:latest || {
              echo "‚ùå Failed to start container. Check logs or Dockerfile."; exit 1;
            }
          echo "‚úÖ Container started successfully."

      - name: Show container logs (if failed)
        if: failure()
        run: |
          echo "üìã Showing logs from failed container (if any)..."
          docker logs streamlit-app || echo "‚ö†Ô∏è No logs found."

      - name: Clean previous images and containers
        run: |
          echo "üßπ Cleaning up unused images and containers..."
          docker system prune -f
